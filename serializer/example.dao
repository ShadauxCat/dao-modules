load serializer;

list1 = { 1.3, 2.5, 3.6 }
list2 = { (any)(name='dao',year=2006), (123+456C, 'abc'), [1.2, 3.4; 5.6, 7.8] }

s1 = std.serialize( list1 );
s2 = std.serialize( list2 );

io.writeln( s2 )
io.writeln( s1, std.deserialize( s1 ) )
io.writeln( s2, std.deserialize( s2 ) )

map1 = { 'abc'->123, 'def'->{} }
s3 = std.serialize( map1 );
io.writeln( s3, std.deserialize( s3 ) )


class Klass
{
	var index = 123;
	var name = 'abc';

	routine Klass( ){ index = 789; }
	routine Klass( i: int, s: string ){ index = i; name = s; }
	routine Klass( tup: tuple<int,string> ){ index = tup[0]; name = tup[1]; }
	routine serialize(){ return index, name }
}
object = Klass( 456, 'def' );
io.writeln( object.serialize() );

ss = std.serialize( object );
io.writeln( ss );
object = (Klass)std.deserialize( ss )
io.writeln( object, object.index, object.name );

ss = std.serialize( { object } );
io.writeln( ss );
objects = std.deserialize( ss )
object = objects[0]
io.writeln( objects, object.index, object.name );


e = Exception::Error( 'serialization test' );
ss = std.serialize( e );
io.writeln( ss, std.about(ss) );
e = std.deserialize( ss )
io.writeln( e, e.summary );

class MyException : Exception::Error
{
	#use Exception;
	routine MyException( info = '' ) : Exception::Error( info ){}
	routine typename(){ return 'MyException' } # To override typename() from Exception;
}

e2 = MyException( 'serialization test2' );
ss = std.serialize( { e2 } );
io.writeln( ss );

e2 = std.deserialize( ss )[0]
io.writeln( e2, e2.summary );
