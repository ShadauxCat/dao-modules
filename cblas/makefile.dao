
code = 
@[cxx]
#include "cblas.h"
int main(void){
	void *p = cblas_dgemv;
	return 0;
}
@[cxx]

if( DaoMake::TestCompile( code, "-lcblas", "-I" + DaoMake::SourcePath() ) == 0 ) return

project = DaoMake::Project( "cblas" ) 

daovm = DaoMake::FindPackage( "Dao", $REQUIRED )

if( daovm == none ) return

source_cblas = { "dao_cblas.c", "dao_cblas2.c", "dao_cblas3.c" }

project.UseImportLibrary( daovm, "dao" )

clangdao = project.MakeBuildPath( "../../bin/clangdao" )
if( DaoMake::IsFile( clangdao ) && DaoMake::IsOutOfSourceBuild() == 0 ){
	project.AddCommand( "$(DAOMAKE_SOURCE_DIR)/dao_cblas.h: cblas.h cblas.c", clangdao + " cblas.c" )
}

project.SetTargetPath( "../../lib/dao/modules" )

project.AddIncludePath( "../../kernel" )
project.AddIncludePath( "../../" )
project.AddLinkingFlag( "-lcblas" )
project.SetTargetPath( "../../lib/dao/modules" )

project_objs = project.AddObjects( source_cblas, { "dao_cblas.h" } )

project_dll  = project.AddSharedLibrary( "dao_cblas", project_objs )
project_lib  = project.AddStaticLibrary( "dao_cblas", project_objs )



project.GenerateFinder( $TRUE );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], project_dll );
project.Install( DaoMake::Variables[ "INSTALL_MOD" ], project_lib );
